<?xml version="1.0" encoding="UTF-8"?>
<faqs title="FAQ - Common Questions">
    <part id="Common Questions">
        <faq id="what_kinds_data_model">
            <question>What kinds of Data Model does the library provide?</question>
            <answer>
                <p>
                    Currently there are following kinds of data models:

                    <ul>
                        <li>Editable model (grid)</li>
                        <li>Hierarchcal model (grid)</li>
                        <li>Tree model (grid)</li>
                        <li>Lazily Loadable model (grid, suggestion box)</li>
                        <li>List model (combo box, suggestion box)</li>
                    </ul>
                </p>
                <p>
                    In fact most of data model implementations implement several types. Tipycal samples are

                    <ul>
                        <li><i>EditableGridDataModel</i>. This class implements Editable and LazyLoadable interfaces.</li>
                        <li><i>LazyGridDataModel</i>. This class implements Editable and LazyLoadable interfaces.</li>
                        <li><i>HierarchicalGridDataModel</i>. This class implements Editable and Hierarchical interfaces.</li>
                        <li><i>LazyHierarchicalGridDataModel.</i>This class implements editable, hierarachical and lazy interfaces.</li>
                        <li><i>TreeGridDataModel.</i>This class implements editable and tree interfaces.</li>
                        <li><i>LazyTreeGridDataModel.</i>This class implements editable, tree and lazy interfaces.</li>
                    </ul>
                </p>
                <p>
                      In some cases you can also use combined models. For instance if you have a
                      <a href="../hierarchical-grid.html">Hierarchical Grid</a> you can put a
                      <a href="../tree-grid.html">Tree Grid</a> into the first one.
                </p>
            </answer>
        </faq>
        <faq id="what_is_simple_data_model">
            <question>What is the Simple Data Model?</question>
            <answer>
                <p>
                    <i>SimpleDataModel</i> is a basic class for all non-hierarchical non-editable models.
                    You can instantiate it, but there is no any widget where you can apply it. This class is
                    kept for future improvements.
                </p>
            </answer>
        </faq>
        <faq id="what_is_editable_data_model">
            <question>What is the Editable Data Model?</question>
            <answer>
                <p>
                    <i>EditableGridDataModel</i> is a widely used implementation. It was developed especially for the
                    <a href="../editable-grid.html">EditableGrid</a>. Sample below shows how you can instantiate it.
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="color:#808080;background-color:#ffffff;font-style:italic;">//create a new grid
</span><span style="background-color:#ffffff;">EditableGrid grid =</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> EditableGrid(
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"First Name"</span><span style="background-color:#ffffff;">, </span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Surname"</span><span style="background-color:#ffffff;">},
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Class[]{LabelCell.</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">class</span><span style="background-color:#ffffff;">, LabelCell.</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">class</span><span style="background-color:#ffffff;">}
);</span></pre>
                </p>
                <p>
                    The sample illustrates how put data in the model. Note that "data" in this context means a
                    two-dimension array of abstract objects. In common case Objects can be not only strings but
                    numbers, dates and even other GWT widgets. And it's a reason data models are not serializable.
                </p>
                <p>
                    This sample constructs a model that doesn't allow lazy loading of data with AJAX. You can change
                    the data programmatically but you still have to worry about view and model synchronization in this
                    case.
                </p>
            </answer>
        </faq>
        <faq id="what_is_hierarchical_data_model">
            <question>What is the Hierarchical Data Model?</question>
            <answer>
                <p>
                    Hierarchical data model allows to store related entities. It's designed for the
                    <a href="../hierarchical-grid.html">Hierarchical Grid widget</a>. The sample below illustrates
                    how to create a simple hierarchy.
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="color:#808080;background-color:#ffffff;font-style:italic;">//create a new model containing employees
</span><span style="background-color:#ffffff;">Editable model =</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> EditableGridDataModel(
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Object[][] {
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"John"</span><span style="background-color:#ffffff;">, </span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Doe"</span><span style="background-color:#ffffff;">},
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Piter"</span><span style="background-color:#ffffff;">, </span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Walkman"</span><span style="background-color:#ffffff;">},
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Rupert"</span><span style="background-color:#ffffff;">, </span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Brown"</span><span style="background-color:#ffffff;">}
    }
);

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">//create a new model containing departments
</span><span style="background-color:#ffffff;">HierarchicalGridDataModel hierarchicalModel =</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> HierarchicalGridDataModel(
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Object[][] {
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Object[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Accountants"</span><span style="background-color:#ffffff;">, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Integer(</span><span style="color:#0000ff;background-color:#ffffff;">3</span><span style="background-color:#ffffff;">)},
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Object[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Management"</span><span style="background-color:#ffffff;">, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Integer(</span><span style="color:#0000ff;background-color:#ffffff;">10</span><span style="background-color:#ffffff;">)},
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Object[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Development"</span><span style="background-color:#ffffff;">, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Integer(</span><span style="color:#0000ff;background-color:#ffffff;">100</span><span style="background-color:#ffffff;">)}
    }
);

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">//make a relationship between Accountants department and a list of employees
</span><span style="background-color:#ffffff;">hierarchicalModel.addSubgridModel(</span><span style="color:#0000ff;background-color:#ffffff;">0</span><span style="background-color:#ffffff;">, </span><span style="color:#0000ff;background-color:#ffffff;">0</span><span style="background-color:#ffffff;">, model);</span></pre>
                </p>
                <p>
                    Note that the hierarchical model is not just a tree structure. It's more complicated. For example 
                    you can make a relationship not only between a concrete parent entity and a list of child entities.
                    Grid cells can contain more complex entities like widgets and therefore you can link a submodel to
                    a particular cell. In fact this functionality is limited by the Hierarchcal Grid widget to simplify
                    development, but you are able to design your own grid and reuse the same model in more flexible way.
                </p>
            </answer>
        </faq>
        <faq id="what_is_tree_data_model">
            <question>What is the Tree Data Model?</question>
            <answer>
                <p>
                    Tree Data Model is an extension of the Editable Data Model that allows describing tree structures.
                    It contains additional methods which help working with branches of this tree. The sample below
                    illustrates how to fill the model with structured data.
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="color:#808080;background-color:#ffffff;font-style:italic;">//create a new model and add one root item
</span><span style="background-color:#ffffff;">TreeGridDataModel model =</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> TreeGridDataModel(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Object[][]{</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"President"</span><span style="background-color:#ffffff;">}});
model.setAscending(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">false</span><span style="background-color:#ffffff;">);
model.setPageSize(</span><span style="color:#0000ff;background-color:#ffffff;">3</span><span style="background-color:#ffffff;">);

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">//create second level items
</span><span style="background-color:#ffffff;">TreeGridRow president = (TreeGridRow) model.getRow(</span><span style="color:#0000ff;background-color:#ffffff;">0</span><span style="background-color:#ffffff;">);
president.setExpanded(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">true</span><span style="background-color:#ffffff;">);
president.setPageSize(</span><span style="color:#0000ff;background-color:#ffffff;">3</span><span style="background-color:#ffffff;">);
president.setPagerEnabled(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">true</span><span style="background-color:#ffffff;">);
model.addRow(president, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Financial Department Director"</span><span style="background-color:#ffffff;">});
model.addRow(president, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Marketing Department Director"</span><span style="background-color:#ffffff;">});
model.addRow(president, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Chief Security Officer"</span><span style="background-color:#ffffff;">});
model.addRow(president, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Development Department Director"</span><span style="background-color:#ffffff;">});

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">//create third level items for the first department
</span><span style="background-color:#ffffff;">TreeGridRow financialDirector = model.getRow(president, </span><span style="color:#0000ff;background-color:#ffffff;">0</span><span style="background-color:#ffffff;">);
model.addRow(financialDirector, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Accountant"</span><span style="background-color:#ffffff;">});
model.addRow(financialDirector, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Financial Manager"</span><span style="background-color:#ffffff;">});

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">//create third level items for the second department
</span><span style="background-color:#ffffff;">TreeGridRow marketingDirector = model.getRow(president, </span><span style="color:#0000ff;background-color:#ffffff;">0</span><span style="background-color:#ffffff;">);
model.addRow(marketingDirector, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Brand Manager"</span><span style="background-color:#ffffff;">});
model.addRow(marketingDirector, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Sales manager"</span><span style="background-color:#ffffff;">});
model.addRow(marketingDirector, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Promouter"</span><span style="background-color:#ffffff;">});

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">//create third level items for the last department and configure paging
</span><span style="background-color:#ffffff;">TreeGridRow developmentDirector = model.getRow(president, </span><span style="color:#0000ff;background-color:#ffffff;">0</span><span style="background-color:#ffffff;">);
president.setPageSize(</span><span style="color:#0000ff;background-color:#ffffff;">3</span><span style="background-color:#ffffff;">);
president.setPagerEnabled(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">true</span><span style="background-color:#ffffff;">);
model.addRow(marketingDirector, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Database Developer"</span><span style="background-color:#ffffff;">});
model.addRow(marketingDirector, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"UI Developer"</span><span style="background-color:#ffffff;">});
model.addRow(marketingDirector, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Support Engeneer"</span><span style="background-color:#ffffff;">});
model.addRow(marketingDirector, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Tester"</span><span style="background-color:#ffffff;">});
</span></pre>
                </p>
                <p>
                    This sample creates a new Tree Data Model and fills it with the data. Additionally it enables
                    paging for particular nodes.
                </p>
            </answer>
        </faq>
        <faq id="what_is_lazy_data_model">
            <question>What is the Lazy Data Model?</question>
            <answer>
                <p>
                    Lazy Data Model is useful if you need server side data loading, paging and sorting. This model
                    implements the <i>org.gwt.advanced.client.datamodel.LazyLoadable</i> interface. If fact it's
                    an extension of the Editable Data Model, but it tries to "cheat" a grid returning greater total
                    row count then the model contains. Look at the next sample to understand how it works.
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="background-color:#ffffff;">LazyLoadable model =</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> LazyGridDataModel(
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> DataModelCallbackHandler() {
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> void</span><span style="background-color:#ffffff;"> synchronize(GridDataModel model) {
            </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// get removed rows
            </span><span style="background-color:#ffffff;">Object[][] removedRows = ((Editable) model).getRemovedRows();

            </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// delete data from the storage

            </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// clear old information
            </span><span style="background-color:#ffffff;">((Editable) model).clearRemovedRows();
        }
    }
);
</span></pre>
                </p>
                <p>
                    There are two important things in this listing. The first one is that we set a total row count
                    directly. The second one is that we defined a data model callback handler. It's a best practise
                    to use callback handlers with lazy models. Otheriwse grid content will never be refreshed on page
                    change, sorting, etc. Note also that we set a total row count in the <i>synchronize()</i> method.
                    It's a best practise as well.
                </p>
            </answer>
        </faq>
        <faq id="how_does_data_synchronization_work">
            <question>How does data synchronization work?</question>
            <answer>
                <p>
                    Data synchronization is an important option of the data models. There are two types of
                    synchronization available:

                    <ul>
                        <li>client side</li>
                        <li>server side</li>
                    </ul>
                </p>
                <p>
                    To enable data synchronization you should set a data model callback handler as it has been
                    illustrated in <a href="#what_is_lazy_data_model">What is the Lazy Data Model?</a>. To use client side
                    synchronization you should create a simple Editable data model. Note that in this case paging and
                    sorting will be done automatically by the model on client side. In case of lazy loading you will
                    have to do it using server side tools (usually database queries).
                    Every time when a grid decides that synchronization is required, it invokes the <i>synchonize()</i>
                    method. It may happen on the following events:

                    <ul>
                        <li>Save button pressed</li>
                        <li>Page changed</li>
                        <li>Sorting order / column changed</li>
                    </ul>
                </p>
                <p>
                    When you implement the callback handler you should take into account that it must not only load
                    data but save it in the persistence storage, delete rows and do other synchronization actions.
                    But if you use client side synchronization you can do it not in the handler but on save event like
                    it shown in the next sample.
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="background-color:#ffffff;">GridPanel panel =</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> GridPanel();
</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// initialize the panel here

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// add custom listener
</span><span style="background-color:#ffffff;">panel.getMediator().addGridListener(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> GridListenerAdapter() {
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> void</span><span style="background-color:#ffffff;"> onSave(GridDataModel dataModel) {
        </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">//do synchronization
    </span><span style="background-color:#ffffff;">}
));</span></pre>
                </p>
                <p>Sometimes it can be much simpler then handler implementation.</p>
            </answer>
        </faq>
        <faq id="how_develop_custom_callback_handler">
            <question>How to develop a custom callback handler?</question>
            <answer>
                <p>
                    To develop a custom data model callback handler you should implement the
                    <i>org.gwt.advanced.client.datamodel.DataModelCallbackHandler</i> interface. Note that
                    "synchronization" means that your handler should load data, fill the model, update and remove
                    rows in the persistence storage, etc. Remeber, that the model passed into the <i>synchronize()</i>
                    method contains not only actual rows but also contains a list of removed rows. These rows can be
                    obtained using the <i>Editable.getRemovedRows()</i> method.
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="color:#808080;background-color:#ffffff;font-style:italic;">// get removed rows
</span><span style="background-color:#ffffff;">Object[][] removedRows = ((Editable) model).getRemovedRows();

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// delete data from the storage

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// clear old information
</span><span style="background-color:#ffffff;">((Editable) model).clearRemovedRows();</span></pre>
                </p>
                <p>
                    Don't forget to clear history. Otherwise your handler will try to remove the same rows from the
                    persistence storage every time when synchronization required.
                </p>
            </answer>
        </faq>
        <faq id="what_is_locking">
            <question>What is locking and why is locking mandatory if I use server side synchronization?</question>
            <answer>
                <p>
                    Locking is a mechanism that prevents asynchronous data changes in the grids rised by a user.
                    You can use locking in any place of your application every time you want to lock advanced GWT
                    widgets controls. As soon as you locked the screen and finished necessary actions, you should
                    unlock it.
                </p>
                <p>
                    Don't forget to do this step and note that on unlock event grid content will be refreshed.
                    So, if you use callback handlers to synchronize data, you can lock and unlock a particular
                    grid from these handlers. And no any other actions required to refresh the grid after
                    synchronization.
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> class</span><span style="background-color:#ffffff;"> MyHandler</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> implements</span><span style="background-color:#ffffff;"> DataModelCallbackHandler {
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">private</span><span style="background-color:#ffffff;"> GridPanel</span><span style="color:#660e7a;background-color:#ffffff;font-weight:bold;"> panel;

        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="background-color:#ffffff;"> MyHandler(GridPanel panel) {
            </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">this</span><span style="background-color:#ffffff;">.</span><span style="color:#660e7a;background-color:#ffffff;font-weight:bold;">panel</span><span style="background-color:#ffffff;"> = panel;
        }

        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> void</span><span style="background-color:#ffffff;"> synchronize(GridDataModel model) {
            </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">//lock the grid panel
            </span><span style="color:#660e7a;background-color:#ffffff;font-weight:bold;">panel.</span><span style="background-color:#ffffff;">lock();
            </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">try</span><span style="background-color:#ffffff;"> {
                </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// synchronize data here
            </span><span style="background-color:#ffffff;">}</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> finally</span><span style="background-color:#ffffff;"> {
                </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// unlock the panel and refresh grid content
                </span><span style="color:#660e7a;background-color:#ffffff;font-weight:bold;">panel.</span><span style="background-color:#ffffff;">unlock();
        }
    }
}</span></pre>
                </p>
                <p>
                    In case if you don't use callback handlers, locking is not required and content will be
                    refreshed automatically.
                </p>
                <div class="googleAds"><google-ads-horizontal-banner/></div>
            </answer>
        </faq>
        <faq id="what_are_events">
            <question>What are data model events?</question>
            <answer>
                <p>
                    Every time the model is changed it sends an event that is handled by the <i>EventMediator</i> class.
                    This class invokes appropriate methods of the grid widget and makes it update the view.
                </p>
                <p>
                    You can also use the events to do application specific operations on data change. Everything you
                    need is to implement the <i>EditableModelListener</i> interface and register your implementation
                    using the <i>EditableGridDataModel.addListener()</i> method.
                </p>
            </answer>
        </faq>
    </part>
</faqs>