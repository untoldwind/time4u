<?xml version="1.0" encoding="UTF-8"?>
<faqs title="FAQ - Common Questions">
    <part id="Common Questions">
        <faq id="what_is_advanced_gwt_components">
            <question>What is the Advanced GWT Components library?</question>
            <answer>
                <p>
                    Advanced GWT Components library is a set of GWT widgets designed to simplify Web 2.0 UI development in Java.
                    Components architecture is based on MVP pattern typical for Swing applications. The main entities of the
                    library are Data Model, Advanced Widget and Event Listener.
                </p>
                <p>
                    Wrapping JavaScript functionality in Java code GWT simplifies working with rich web interfaces even for those
                    developers who are not familiar with DHTML. Advanced GWT Components extends the standard set of GWT widgets
                    and allows creating complicated UI even faster than the tools available by default.
                </p>
                <p>
                    Advanced GWT Components might be useful in those specializations where non-trivial data representations
                    required, for instance, banking, science, accounting, etc.
                </p>
            </answer>
        </faq>
        <faq id="is_library_free">
            <question>Is the library free?</question>
            <answer>
                <p>
                    Yes and distributed under <a href="license.html">Apache License 2.0</a>.
                </p>
                <p>
                    And you can download the latest version on the
                    <a href="http://sourceforge.net/project/showfiles.php?group_id=216339&amp;package_id=261233">SourceForge download page</a> right now.
                </p>
            </answer>
        </faq>
        <faq id="how_does_it_work">
            <question>How does it work?</question>
            <answer>
                <p>
                    Here is a simpliest sample illustrating how to use the library widgets..
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="color:#808080;background-color:#ffffff;font-style:italic;">//create a new model containing employees
</span><span style="background-color:#ffffff;">Editable model =</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> EditableGridDataModel(
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Object[][] {
            </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"John"</span><span style="background-color:#ffffff;">, </span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Doe"</span><span style="background-color:#ffffff;">},
            </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Piter"</span><span style="background-color:#ffffff;">, </span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Walkman"</span><span style="background-color:#ffffff;">},
            </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Rupert"</span><span style="background-color:#ffffff;">, </span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Brown"</span><span style="background-color:#ffffff;">}
        }
    );

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// create a new grid of employees
</span><span style="background-color:#ffffff;">GridPanel panel =</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> GridPanel();
panel.createEditableGrid(
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"First Name"</span><span style="background-color:#ffffff;">, </span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Surname"</span><span style="background-color:#ffffff;">},
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Class[]{LabelCell.</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">class</span><span style="background-color:#ffffff;">, LabelCell.</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">class</span><span style="background-color:#ffffff;">},
    model
);

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// display all
</span><span style="background-color:#ffffff;">panel.display();
RootPanel.</span><span style="background-color:#ffffff;font-style:italic;">get(</span><span style="background-color:#ffffff;">).add(panel);</span></pre>
                </p>
                <p>
                    The sample underlines four main steps:

                    <ul>
                        <li>Grid widgets creation</li>
                        <li>Data Model creation</li>
                        <li>Data Model and Grid relationship setting</li>
                        <li>Grid widget displaying</li>
                    </ul>
                </p>
                <p>
                    All the steps are mandatory. Order of two first steps is not important. Additional customization
                    requires other actions. Note that this sample demonstrates basic features only.
                </p>
                <p>
                    If you need more advanced functionality please read other <a href="../faq.html">FAQ sections</a>.
                </p>
            </answer>
        </faq>
        <faq id="what_is_data_model">
            <question>What is the Data Model?</question>
            <answer>
                <p>
                    Data Model is a part of MVC pattern. In the libarary it's any class that implements the 
                    <i>org.gwt.advanced.client.datamodel.GridDataModel</i> interface. This interface (and all
                    implementations as well) defines what rows must be shown by a grid, in what order they must be
                    sorted, by which column and provides some methods for data getting. Data models are used by
                    grids to obtain data before visualization.
                </p>
                <p>
                    There are several common interfaces which extend this one:

                    <ul>
                        <li><i>org.gwt.advanced.client.datamodel.Editable</i> This interface is used by the Editable Grid. It contains methods for data manipulations required on edit events.</li>
                        <li><i>org.gwt.advanced.client.datamodel.Hierarchical </i>This interface extends Editable and provides a couple of methods for submodels manipulations.</li>
                    </ul>

                    Every time you decide what grid you'd prefer in a particular situation you should also choose a data model.
                </p>
            </answer>
        </faq>
        <faq id="what_is_advanced_widget">
            <question>What is the Advanced Widget?</question>
            <answer>
                <p>
                    Advanced Widget is a basic abstraction of all library widgets. The <i>AdvancedWidget</i> interface 
                    contains just one method - <i>display()</i>. If you want to see a widget on the screen you have to
                    invoke this method. But do it only if you prepared the widget to be displayed, i.e. all widget
                    fileds initialized properly.
                </p>
            </answer>
        </faq>
        <faq id="where_can_i_find_library_api">
            <question>Where can I find library API documents?</question>
            <answer>
                <p>
                    Automactacally generated and up-to-date JavaDocs can be found <a href="../apidocs/index.html">here</a>. 
                </p>
                <div class="googleAds"><google-ads-horizontal-banner/></div>
            </answer>
        </faq>
        <faq id="what_is_mvp">
            <question>What is MVP? Why do I need it?</question>
            <answer>
                <p>
                    MVP (Model-View-Presenter) is a user interface design pattern engineered to facilitate automated
                    unit testing and improve the separation of concerns in presentation logic.
                    The Model is an interface defining the data to be displayed or otherwise acted upon in the user
                    interface.
                    The View is an interface that displays data (the Model) and routes user commands to the Presenter
                    to act upon that data.
                    The Presenter acts upon the Model and the View. It retrieves data from repositories, persists it,
                    manipulates it, and determines how it will be displayed in the View.
                </p>
                <p>
                    Advanced GWT Components framework extends the standard GWT widgets and defines structures which can
                    be identified as the "Model". The library also uses "renderers" which are the "View". And finally it
                    provides component classes which can be interpreted as the "Presenter".
                </p>
                <div class="googleAds"><google-ads-horizontal-banner/></div>
            </answer>
        </faq>
    </part>
</faqs>