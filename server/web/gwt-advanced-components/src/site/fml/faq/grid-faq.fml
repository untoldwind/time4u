<?xml version="1.0" encoding="UTF-8"?>
<faqs title="FAQ - Grid Widget Questions">
    <part id="Grid Widget Questions">
        <faq id="what_is_advanced_flex_table">
            <question>What is the Advanced Flex Table?</question>
            <answer>
                <p>
                    <a href="../advanced-flex-table.html">Advanced Flex Table</a> is a basic class of all the grids.
                    It extends standard GWT FlexTable widget and adds the following functionality:

                    <ul>
                        <li>thead tag support</li>
                        <li>browser independednt verticall scrolling of table content</li>
                    </ul>
                </p>
                <p>
                    You can use this widget directly for your own purposes as well as you usaully use <i>FlexTable</i>. 
                    Here is sample of <i>AdnvacedFlexTable</i> functionality.
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="background-color:#ffffff;">AdvancedFlexTable table =</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> AdvancedFlexTable();

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// create headers and put them in the thead tag
</span><span style="background-color:#ffffff;">table.setHeaderWidget(</span><span style="color:#0000ff;background-color:#ffffff;">0</span><span style="background-color:#ffffff;">, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Label(</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"First Name"</span><span style="background-color:#ffffff;">));
table.setHeaderWidget(</span><span style="color:#0000ff;background-color:#ffffff;">1</span><span style="background-color:#ffffff;">, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Label(</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Surname"</span><span style="background-color:#ffffff;">));

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// enable verticall scrolling
</span><span style="background-color:#ffffff;">table.enableVerticalScrolling(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">true</span><span style="background-color:#ffffff;">);</span></pre>
                </p>
                <p>
                    This sample create a new table with two columns and enables vertical scrolling of table content.
                    The main feature of the scrolling is that it keeps headers fixed and scrolls just body rows.
                </p>
            </answer>
        </faq>
        <faq id="what_is_editable_grid">
            <question>What is the Editable Grid?</question>
            <answer>
                <p>
                    <a href="../editable-grid.html">Editable Grid</a> is an extension of the
                    <a href="../advanced-flex-table.html">Advanced Flex Table</a>. It allows cells editing. Clicking
                    on a cell a user will be able to change its content. It also supports entered values validation.
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="background-color:#ffffff;">Editable model =</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> EditableGridDataModel(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">null</span><span style="background-color:#ffffff;">);

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// create a new grid panel
</span><span style="background-color:#ffffff;">GridPanel panel =</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> GridPanel();

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// create a new editable grid and put it into the panel
</span><span style="background-color:#ffffff;">EditableGrid grid = panel.createEditableGrid (
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"First Name"</span><span style="background-color:#ffffff;">, </span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Surname"</span><span style="background-color:#ffffff;">},
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Class[]{LabelCell.</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">class</span><span style="background-color:#ffffff;">, LabelCell.</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">class</span><span style="background-color:#ffffff;">},
    model
);

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// display all
</span><span style="background-color:#ffffff;">panel.display();</span></pre>
                </p>
                <p>
                    It's a good practise to create a new editable grid using the <a href="../grid-panel.html">Grid Panel</a>,
                    because in this case grid initialization is much simpler. The panel also provides grid managemnet
                    controls like <a href="../grid-panel.html">Grid Toolbar</a>. Note that creating a new editable grid
                    you must specify a list of grid cells. Grid cells define how the data will be displayed in a cell,
                    whether it's editable and what specific event it can produce. Each cell class should implement the 
                    <i>org.gwt.advanced.client.ui.widget.cell.GridCell</i> interface. Here is a list of supported cells.
                </p>
                <table class="faqTable">
                  <thead>
                    <tr>
                      <th>
                        Cell Type
                      </th>
                      <th>Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>LabelCell</td>
                      <td>This is a simple read only textual cell. It
                        is applicable for any
                        String values.
                      </td>
                    </tr>
                    <tr>
                      <td>TextBoxCell</td>
                      <td>This is an editable textual cell. It
                        is applicable for any String values.
                      </td>
                    </tr>
                    <tr>
                      <td>BooleanCell</td>
                      <td>This is a checkbox cell. It is applicable for Boolean values.</td>
                    </tr>
                    <tr>
                      <td>DateCell</td>
                      <td>This is a
                        date picker cell. It's applicable for Date values.
                      </td>
                    </tr>
                    <tr>
                      <td>ShortCell</td>
                      <td>This is a numeric
                        cell. It's applicable for Short values.
                      </td>
                    </tr>
                    <tr>
                      <td>IntegerCell</td>
                      <td>This is a numeric
                        cell. It's applicable for Integer and Short values.
                      </td>
                    </tr>
                    <tr>
                      <td>LongCell</td>
                      <td>This
                        is a numberic cell. It's applicable for Long, Integer and Short
                        values.
                      </td>
                    </tr>
                    <tr>
                      <td>FloatCell</td>
                      <td>This is a numeric cell. It's applicable for Float,
                        Integer and
                        Short  values.
                      </td>
                    </tr>
                    <tr>
                      <td>DoubleCell</td>
                      <td>This is a numeric cell. It's applicable for
                        Double, Float, Long,
                        Integer and Short values.
                      </td>
                    </tr>
                    <tr>
                      <td>ImageCell</td>
                      <td>
                        This cell diaplays the GWT Image widget.
                      </td>
                    </tr>
                    <tr>
                      <td>
                        ListCell
                      </td>
                      <td>This cell displays the GWT ListBox widget. Note
                        that it doesn't get arrays or lists!  ListBox instances can be used
                        only.
                      </td>
                    </tr>
                    <tr>
                      <td>
                        HeaderCellImpl
                      </td>
                      <td>This is a header cell widget. Do not use it directly.</td>
                    </tr>
                    <tr>
                      <td>
                        ExpandableCell
                      </td>
                      <td>
                        This cell wraps original cell widget and shows
                         expanded / collapsed state image. It's required by the Hierarchical
                        Grid. Do notuse it directly.
                      </td>
                    </tr>
                    <tr>
                      <td>ComboBoxCell</td>
                      <td>This cell displays a ComboBox widget. It provides
                        the same functionality as ListCell, but uses ComboBox instances instead of
                        LisBoxes.
                      </td>
                    </tr>
                  </tbody>
                </table>
                <p>
                    You can also develop your own cell. <a href="../editable-grid.html">Editable Grid</a> supports
                    Editable and LazyLoadable data models and doesn't support Hierarchical and Tree models.
                </p>
            </answer>
        </faq>
        <faq id="what_is_hierarchical_grid">
            <question>What is the Hierarchical Grid?</question>
            <answer>
                <p>
                    <a href="../hierarchical-grid.html">Hierarchical Grid</a> extends the Editable Grid and supports
                    all the same features. Additionaly it allows you to display subgrids related to particular cells
                    of the main grid.
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="background-color:#ffffff;">Editable hierarchicalModel =</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> HierarchicalGridDataModel(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">null</span><span style="background-color:#ffffff;">);

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// create a new grid panel
</span><span style="background-color:#ffffff;">GridPanel panel =</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> GridPanel();

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// create a new editable grid and put it into the panel
</span><span style="background-color:#ffffff;">HierarchicalGrid grid = (HierarchicalGrid) panel.createEditableGrid (
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Department"</span><span style="background-color:#ffffff;">, </span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Number of Employees"</span><span style="background-color:#ffffff;">},
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Class[]{LabelCell.</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">class</span><span style="background-color:#ffffff;">, IntegerCell.</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">class</span><span style="background-color:#ffffff;">},
   hierarchicalModel
);

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// add a grid panel factory to the second column
</span><span style="background-color:#ffffff;">grid.addGridPanelFactory(
    </span><span style="color:#0000ff;background-color:#ffffff;">1</span><span style="background-color:#ffffff;">, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> GridPanelFactory() {
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="background-color:#ffffff;"> GridPanel create(GridDataModel model) {
           GridPanel panel =</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> GridPanel();
            </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// create a new grid here
            </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">return</span><span style="background-color:#ffffff;"> panel;
       }

        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="background-color:#ffffff;"> GridDataModel create(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">int</span><span style="background-color:#ffffff;"> parentRow, GridDataModel parentModel) {
            </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">return</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> EditableGridDataModel(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Object[</span><span style="color:#0000ff;background-color:#ffffff;">0</span><span style="background-color:#ffffff;">][</span><span style="color:#0000ff;background-color:#ffffff;">0</span><span style="background-color:#ffffff;">]);
       }
   }
);

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// display all
</span><span style="background-color:#ffffff;">panel.display();
</span></pre>
                </p>
                <p>
                    <a href="../hierarchical-grid.html">Hierarchical Grid</a> initialization is similar to
                    the <a href="#what_is_editable_grid">previous one</a>.
                    Moreover the <a href="../grid-panel.html">Grid Panel</a> automatically detects what type of grid
                    that must be created by the model type. The difference is that for hierarchical grids you must
                    specify a grid panel factory and map it to a particular column. In this case for each cell of this
                    column will be an expandable widget created.
                </p>
                <p>
                    The panel factory must implement the <i>org.gwt.advanced.client.ui.GridPanelFactory</i> interface.
                    This factory contains two methods. One of them should create a data model for the subgrid,
                    another one should create a grid panel inself. Note that the grid panel of the subgrid must be
                    initialized in this method but NOT displayed.
                    <a href="../hierarchical-grid.html">Hierarchical Grid</a> will do it automatically.
                </p>
                <p>
                    The sample above shows how to create editable data grid model, but you can modify it and create
                    hierarchical data models as well.
                    <a href="../hierarchical-grid.html">Hierarchical Grid</a> supports Editable, Hierarchical and
                    LazyLoadable models.
                </p>
            </answer>
        </faq>
        <faq id="what_is_tree_grid">
            <question>What is the Tree Grid?</question>
            <answer>
                <p>
                    <a href="../tree-grid.html">Tree Grid</a> is a widget that displays tree-like data models.
                    You can use as well as the <a href="../editable-grid.html">Editable Grid</a>.
                    The difference will be in data models. <a href="../tree-grid.html">Tree Grid</a> requires any
                    implementation of the <i>Composite</i> interface.
                    If the model you're specifieng doesn't implement this interface the grid won't work properly.
                </p>
                <p>
                    The library provides the standard implementation of the interface - <i>TreeGridDataModel</i>. How to
                    create an instance of this class and initilize it read this
                    <a href="data-model-faq.html#what_is_tree_data_model">answer</a>.
                </p>
            </answer>
        </faq>
        <faq id="what_is_grid_panel">
            <question>What is the Grid Panel, Toolbar and Pager?</question>
            <answer>
                <p>
                    As you saw in previous samples (1 and 2) it's recommended to use the
                    <a href="../grid-panel.html">Grid Panel</a> widget to create grids. This widget is a facade object
                    for all other grids and grid related widgets. Here is a list of such components:

                    <ul>
                        <li><a href="../grid-panel.html">Grid Toolbar</a>. This component is a toolbarthat provides several buttons to control the grid placed in the panel. Pressing thebuttons a user can add new rows, remove rows, clear the grid and save results (force data synchronization).</li>
                        <li><a href="../grid-panel.html">Pager</a>. This is a widget that allows change current page of data displayed in the grid.</li>
                        <li>different grids</li>
                    </ul>
                </p>
                <p>
                    By default the grid panel has two pagers (top and bottom) and one toolbar (top). But you can
                    switch them off and / or display the widgets in other positions.
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="background-color:#ffffff;">GridPanel panel =</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> GridPanel();

panel.setTopPagerVisible(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">false</span><span style="background-color:#ffffff;">); </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// switch off the top pager
</span><span style="background-color:#ffffff;">panel.setBottomPagerVisible(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">true</span><span style="background-color:#ffffff;">); </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// switch on the bottom pager
</span><span style="background-color:#ffffff;">panel.setTopToolbarVisible(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">false</span><span style="background-color:#ffffff;">); </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// switch off the top toolbar
</span><span style="background-color:#ffffff;">panel.setBottomToolbarVisible(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">true</span><span style="background-color:#ffffff;">); </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// switch on the bottom toolbar

</span><span style="background-color:#ffffff;">panel.setInvisibleColumn(</span><span style="color:#0000ff;background-color:#ffffff;">0</span><span style="background-color:#ffffff;">, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">true</span><span style="background-color:#ffffff;">); </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// set the first column invisible
</span><span style="background-color:#ffffff;">panel.setSortableColumn(</span><span style="color:#0000ff;background-color:#ffffff;">1</span><span style="background-color:#ffffff;">, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">false</span><span style="background-color:#ffffff;">); </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// make the second column non-soirtable
</span><span style="background-color:#ffffff;">panel.setReadonlyColumn(</span><span style="color:#0000ff;background-color:#ffffff;">2</span><span style="background-color:#ffffff;">, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">true</span><span style="background-color:#ffffff;">); </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// make the third column read only</span></pre>
                </p>
                <p>
                    As the grid panel is a facade widget you can also  use some methods which directly change grid
                    options: columns visibility, sortable columns, read only columns, etc
                </p>
            </answer>
        </faq>
        <faq id="what_is_master_detal_panel">
            <question>What is the Master-Detail Panel?</question>
            <answer>
                <p>
                    <a href="../master-detail.html">Master-Detail Panel</a> allows displaying a structure of grids,
                    where content of the detail grid depends on a selected row of the master grid. Sometimes it may be
                    good alternative to the hierarchical grids in those cases when the master grid contains plain
                    entities, i.e. each cell is a simple object and there are no cell dependencies.
                </p>
                <p>
                    This panel extends GWT FlexTable and automatically detects where each of adding grid panels
                    should be placed on the screen. Actually it works like Swing grid layout manager.
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="background-color:#ffffff;">MasterDetailPanel panel =</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> MasterDetailPanel();

GridPanel masterPanel = </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> GridPanel();
panel.addGridPanel(masterPanel, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">null</span><span style="background-color:#ffffff;">, </span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Departments"</span><span style="background-color:#ffffff;">);

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// initialize the master grid here

</span><span style="background-color:#ffffff;">masterPanel.display();

GridPanel detailPanel =</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> GridPanel();
panel.addGridPanel(detailPanel, masterPanel, </span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Employees"</span><span style="background-color:#ffffff;">);

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// initialize the detail grid here

</span><span style="background-color:#ffffff;">detailPanel.display();

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// apply styles
</span><span style="background-color:#ffffff;">panel.display();</span></pre>
                </p>
                <p>
                    Note that you should define a callback handler of the detail grid properly to be sure it displays
                    the correct set of rows. When a user selects any row of the master grid, this handler will be
                    automatically invoked to synchronize data. The last line of the listing is required only to
                    apply CSS since the <a href="../master-detail.html">Master-Detail Panel</a> is able to display
                    nested grid panels dynamically.
                </p>
            </answer>
        </faq>
        <faq id="what_is_locking_panel">
            <question>What is the Locking Panel?</question>
            <answer>
                <p>
                    The locking panel is a widget that you'll never use directly. It extends GWT pop-up panel and is
                    used by the grid panel for locking. It prevents any mouse clicks on the screen before the grid
                    panel unlock it.
                </p>
            </answer>
        </faq>
        <faq id="how_to_make_grid_load_data_from_server">
            <question>How to make a grid load data from the server side?</question>
            <answer>
                <p>
                    Just use callback handlers. Any callback handler can load data using GWT RPC, but don't forget
                    about locking mechanism. Ideally you should lock the grid before RPC request sending and unlock in
                    somewhere in the <i>AsyncCallbackHandler.onSuccess()</i> method.  This rule is mandatory, otheriwise data
                    synchronization may work wrong.
                </p>
                <p>
                    For details see also: <a href="data-model-faq.html#what_is_lazy_data_model">What is the Lazy Data Model?</a>,
                    <a href="data-model-faq.html#how_does_data_synchronization_work">How does data synchronization work?</a>,
                    <a href="data-model-faq.html#how_develop_custom_callback_handler">How to develop a custom callback handler?</a>
                </p>
            </answer>
        </faq>
        <faq id="how_to_enable_client_paging_sorting">
            <question>How to enable client side paging and sorting?</question>
            <answer>
                <p>
                    There is no way to force it. <a href="../editable-grid.html">Editable Grid</a> (and child classes)
                    automatically detects client side sorting and paging by type of the data model you choose.
                    If it's <b>NOT</b> LazyLoadable, then client side srting and paging will be enabled.
                </p>
            </answer>
        </faq>
        <faq id="how_to_develop_custom_cell">
            <question>How to develop a custom cell?</question>
            <answer>
                <p>
                    Custom cell development consists of three steps:

                    <ul>
                        <li>Cell widget creation</li>
                        <li>Cell factory creation</li>
                        <li>Set the cell factory to a grid</li>
                    </ul>
                </p>
                <p>
                    By default the grids use the <i>org.gwt.advanced.client.ui.widget.cell.DefaultGridCellFactory</i>
                    to instantiate cells. If you want to make them use you own cell widgets you must define custom
                    cell factory as well. Extend the default factory or directly implement the
                    <i>org.gwt.advanced.client.ui.widget.cell.GridCellFactory</i> interface and set it for the grid using
                    the <i>EditableGrid.setGridCellfactory()</i> method. The next sample illustrates how custom grid cell
                    widget can be developed.
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> class</span><span style="background-color:#ffffff;"> MyCell</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> extends</span><span style="background-color:#ffffff;"> AbstractCell {
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">private</span><span style="background-color:#ffffff;"> Button</span><span style="color:#660e7a;background-color:#ffffff;font-weight:bold;"> button </span><span style="background-color:#ffffff;">= </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Button(</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Sample"</span><span style="background-color:#ffffff;">);

    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">protected</span><span style="background-color:#ffffff;"> Widget createActive() {
        </span><span style="color:#660e7a;background-color:#ffffff;font-weight:bold;">button.</span><span style="background-color:#ffffff;">setEnabled(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">true</span><span style="background-color:#ffffff;">); </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// enabled and avaliable when the cell is active
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">return</span><span style="color:#660e7a;background-color:#ffffff;font-weight:bold;"> button;
    </span><span style="background-color:#ffffff;">}

    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">protected</span><span style="background-color:#ffffff;"> Widget createInactive() {
        </span><span style="color:#660e7a;background-color:#ffffff;font-weight:bold;">button.</span><span style="background-color:#ffffff;">setEnabled(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">false</span><span style="background-color:#ffffff;">); </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// disabled before a user clicks the cell
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">return</span><span style="color:#660e7a;background-color:#ffffff;font-weight:bold;"> button;
    </span><span style="background-color:#ffffff;">}

    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> void</span><span style="background-color:#ffffff;"> setFocus(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">boolean</span><span style="background-color:#ffffff;"> focus) {
      </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// do nothing
</span><span style="background-color:#ffffff;">}

    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="background-color:#ffffff;"> Object getNewValue() {
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">return</span><span style="color:#660e7a;background-color:#ffffff;font-weight:bold;"> button;
    </span><span style="background-color:#ffffff;">}
}</span></pre>
                </p>
                <p>
                    <i>MyCell</i> is a cell that contains a button widget. By default the button is disabled. But when a
                    user clicks a cell and make it active, the button is enabled.
                </p>
            </answer>
        </faq>
        <faq id="what_is_grid_renderer">
            <question>What is a grid renderer?</question>
            <answer>
                <p>
                    Grid renderer is an entity that performs grid headers and content rendering fucntionality.
                    There are default renderers specified for the grids but you can change default implenetations
                    with your own ones. Note that all the grid renderers must implement the same interface:
                    <i>org.gwt.advanced.client.ui.GridRenderer</i>. You can inherit it directly but the best practise
                    is to extend one of defaul implemntations like it's shown below:
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> class</span><span style="background-color:#ffffff;"> MyGridRenderer</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> extends</span><span style="background-color:#ffffff;"> DefaultGridRenderer {
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="background-color:#ffffff;"> MyGridRenderer(EditableGrid grid) {
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">super</span><span style="background-color:#ffffff;">(grid);
   }

    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> void</span><span style="background-color:#ffffff;"> drawHeaders(Object[] headers) {
        </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">//draw simple labels
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">for</span><span style="background-color:#ffffff;"> (</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">int</span><span style="background-color:#ffffff;"> i = </span><span style="color:#0000ff;background-color:#ffffff;">0</span><span style="background-color:#ffffff;">; i &lt; headers.</span><span style="color:#660e7a;background-color:#ffffff;font-weight:bold;">length;</span><span style="background-color:#ffffff;"> i++) {
            Object header = headers[i];
            getGrid().setHeaderWidget(i, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Label(String.</span><span style="background-color:#ffffff;font-style:italic;">valueOf(</span><span style="background-color:#ffffff;">header)));
       }
   }
}</span></pre>
                </p>
                <p>
                    This sample renders simple headers represented as standard label widgets. Use the
                    <i>EditableGrid.setGridRenderer()</i> method to assign this sample implemntation to your grid.
                </p>
            </answer>
        </faq>
        <faq id="how_to_implement_server_rendering">
            <question>How to implement server side rendering?</question>
            <answer>
                <p>
                    Its' very easy. Just write HTML code rendering component on server side (it may be JSP or any
                    templating engine) and pass generated HTML to GWT client side via GWT RPC. Now when you have
                    the generated HTML write the following class:
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> class</span><span style="background-color:#ffffff;"> ServerSideContentRenderer</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> extends</span><span style="background-color:#ffffff;"> DefaultGridRenderer {
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">private</span><span style="background-color:#ffffff;"> String</span><span style="color:#660e7a;background-color:#ffffff;font-weight:bold;"> html;</span><span style="background-color:#ffffff;"> </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// HTML tbody content rendered on server side

    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="background-color:#ffffff;"> ServerSideContentRenderer(EditableGrid grid, String html) {
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">super</span><span style="background-color:#ffffff;">(grid);
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">this</span><span style="background-color:#ffffff;">.</span><span style="color:#660e7a;background-color:#ffffff;font-weight:bold;">html </span><span style="background-color:#ffffff;">= html;
   }

    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> void</span><span style="background-color:#ffffff;"> drawContent(GridDataModel model) {
       DOM.</span><span style="background-color:#ffffff;font-style:italic;">setInnerHTML(</span><span style="background-color:#ffffff;">getTBodyElement(), </span><span style="color:#660e7a;background-color:#ffffff;font-weight:bold;">html)</span><span style="background-color:#ffffff;">;
   }
}</span></pre>
                </p>
                <p>
                    Note if use at least one editable column you have to fill a data model with correct data, i.e.
                    you need two copies of data: original and rendered as HTML. Now assign the new renderer to your
                    grid using the <i>EditableGrid.setGridRenderer()</i> method.
                </p>
            </answer>
        </faq>
        <faq id="client_vs_server_rendering">
            <question>Client side vs server side rendering. What is preferable?</question>
            <answer>
                <p>
                    Here is list of feature for both approaches. comparing you situation with the described below you
                    can choose the most preferable solution.
                </p>
                <p>
                    Client side rendering:
                    <ul>
                        <li>Easy to develop. Actually it has already been developed by default.</li>
                        <li>Supported by all kinds of grids.</li>
                        <li>There is no data duplication described <a href="#how_to_implement_server_rendering">above</a>.</li>
                        <li>Low perfomance due to JavaScript limitations.</li>
                    </ul>
                </p>
                <p>
                    Server side rendering:
                    <ul>
                        <li>To develop it you will have to implement your own HTML code generator on server side.</li>
                        <li>HierarchicalGrid won't support it automatically if you use expandable cells.</li>
                        <li>Data duplication required to support updatable columns.</li>
                        <li>High perfomance.</li>
                    </ul>
                </p>
                <p>
                    So if you need read only grid with large displayable pages the server side rendering approach is
                    your choice. In other cases client side rendering is more preferable excepting application specific
                    circumstances. 
                </p>
            </answer>
        </faq>
        <faq id="how_to_validate_entered_cell_value">
            <question>How to validate an entred cell value?</question>
            <answer>
                <p>
                    To validate a value of the cell you should implement the
                    <i>org.gwt.advanced.client.ui.EditCellListener</i> interface and using the
                    <i>EditableGrid.addEditCellListener()</i> method add this listener to a grid.
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> class</span><span style="background-color:#ffffff;"> MyValidator</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> implements</span><span style="background-color:#ffffff;"> EditCellListener {
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> boolean</span><span style="background-color:#ffffff;"> onStartEdit(GridCell cell) {
       </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">return</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> true</span><span style="background-color:#ffffff;">; </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// if this method returns false, the cell will never be activated
   </span><span style="background-color:#ffffff;">}

    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> boolean</span><span style="background-color:#ffffff;"> onFinishEdit(GridCell cell, Object newValue) {
        </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// if the first column value is equal to "wrong", return false
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">return</span><span style="background-color:#ffffff;"> cell.getColumn() != </span><span style="color:#0000ff;background-color:#ffffff;">0</span><span style="background-color:#ffffff;"> || !</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"wrong"</span><span style="background-color:#ffffff;">.equals(newValue);
   }
}</span></pre>
                </p>
                <p>
                    This validator checks whether the new value of the first column is equal to "wrong" and if it's so
                    returns false. In this case the grid restores the old value automatically and deactivates the cell.
                    Note that <i>onStartEdit()</i> should return true in most cases otherwise the cell will never be
                    activated and users can't edit the value.
                </p>
            </answer>
        </faq>
        <faq id="my_grid_doesnt_refresh_content">
            <question>My grid doesn't refresh content on page change / sorting / saving. What can I do?</question>
            <answer>
                <p>
                    Probably you use callback handlers and forgot about locking mechanism. Read the following answer:
                    <a href="data-model-faq.html#what_is_locking">What is locking and why is locking mandatory if I use server side synchronization?</a>
                </p>
            </answer>
        </faq>
        <faq id="how_to_develop_custom_grid_panel_factory">
            <question>How to develop a custom grid panel factory?</question>
            <answer>
                <p>
                    Custom grid panel factories required only if you want to use hierarchical grids.
                    The following sample shows how to create your own grid panel factory.
<pre style="line-height: 100%;font-family:monospace;background-color:#ffffff"><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> class</span><span style="background-color:#ffffff;"> MyGridPanelFactory</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> implements</span><span style="background-color:#ffffff;"> GridPanelFactory {
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="background-color:#ffffff;"> GridPanel create(GridDataModel model) {
       GridPanel panel = </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> GridPanel();

        </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// initialize the subgrid
        </span><span style="background-color:#ffffff;">panel.createEditableGrid (
            </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"First Name"</span><span style="background-color:#ffffff;">, </span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Surname"</span><span style="background-color:#ffffff;">},
            </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Class[]{LabelCell.</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">class</span><span style="background-color:#ffffff;">, LabelCell.</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">class</span><span style="background-color:#ffffff;">},
           (Editable) model
       );

        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">return</span><span style="background-color:#ffffff;"> panel;
   }

    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="background-color:#ffffff;"> GridDataModel create(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">int</span><span style="background-color:#ffffff;"> parentRow, GridDataModel parentModel) {
        </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// default initialization
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">return</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> new</span><span style="background-color:#ffffff;"> EditableGridDataModel(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Object[</span><span style="color:#0000ff;background-color:#ffffff;">0</span><span style="background-color:#ffffff;">][</span><span style="color:#0000ff;background-color:#ffffff;">0</span><span style="background-color:#ffffff;">]);
   }
}
</span></pre>
                </p>
                <p>
                    See answer <a href="#what_is_hierarchical_grid">What is the Hierarchical Grid?</a> to know how to use panel factories.
                </p>
            </answer>
        </faq>
        <faq id="how_to_handle_row_selection">
            <question>How to handle row selection?</question>
            <answer>
                <p>
                    If you want to do any action on row selection you should implement the
                    <i>org.gwt.advanced.client.ui.SelectRowListener</i> interface and using the
                    <i>EditableGrid.addSelectRowListener()</i> add it to the grid.
<pre style="line-height: 100%;font-family:monospace;background-color:#ffffff"><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> class</span><span style="background-color:#ffffff;"> MyRowSelectionListener</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> implements</span><span style="background-color:#ffffff;"> SelectRowListener {
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> void</span><span style="background-color:#ffffff;"> onSelect(EditableGrid grid, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">int</span><span style="background-color:#ffffff;"> row) {
        Window.</span><span style="background-color:#ffffff;font-style:italic;">alert(</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Row number "</span><span style="background-color:#ffffff;"> + row);
   }
}</span></pre>
                </p>
                <p>
                    This listener displays the alert window every time when a new row selected.
                </p>
            </answer>
        </faq>
        <faq id="how_to_enable_multiple">
            <question>How to enable multiple row selection?</question>
            <answer>
                <p>
                    The EditableGrid and other subclasses support multiple row selection mode. To enable it
                    you should invoke the <i>EditableGrid.setMultiRowModeEnabled()</i> method.
                </p>
                <p>
                    Using this mode you can choose more than one row if you press Shift or Ctrl button.
                </p>
            </answer>
        </faq>
        <faq id="how_to_set_default_row">
            <question>How to set default row selection?</question>
            <answer>
                <p>
                    Normally you can select any row using the <i>setCurrentRow()</i> method. But by default all the grids
                    select the first row as soon as the grid rendered. Sometimes you may require another default
                    cursor position. In this case it might be too late to use <i>setCurrentRow()</i>. Since version 1.4.0
                    you can invoke <i>setDefaultSelectedRow()</i> method before <i>display()</i>.
                </p>
            </answer>
        </faq>
        <faq id="how_to_make_column_read_only">
            <question>How to make a column be read only?</question>
            <answer>
                <p>
                    Just use one the following methods:

                    <ul>
                        <li><i>GridPanel.setReadonlyColumn()</i></li>
                        <li><i>EditableGrid.setReadOnly()</i></li>
                    </ul>
                </p>
            </answer>
        </faq>
        <faq id="how_to_make_column_sortable">
            <question>How to make a column be sortable?</question>
            <answer>
                <p>
                    By default all the columns are sortable. But if you want to make some of them unsortable just
                    invoke one the following methods:

                    <ul>
                        <li><i>GridPanel.setSortableColumn()</i></li>
                        <li><i>EditableGrid.setSortable()</i></li>
                    </ul>
                </p>
            </answer>
        </faq>
        <faq id="how_to_make_cell_expandable">
            <question>How to make a cell expandable in the hierarchcal grid?</question>
            <answer>
                <p>
                    You can't do it directly. Instead you should add a custom grid panel factory to an appropriate
                    column. See <a href="#what_is_hierarchical_grid">What is the Hierarchical Grid?</a> and
                    <a href="#how_to_develop_custom_grid_panel_factory">How to develop a custom grid panel factory?</a> for details.
                </p>
            </answer>
        </faq>
        <faq id="how_many_levels_allowed_in_hierarchical_grid">
            <question>How many levels allowed in the hierarchical grid?</question>
            <answer>
                <p>
                    As many as you wish. But note that you ahve to use Hierarchical data models in subgrids.
                    See <a href="#what_is_hierarchical_grid">What is the Hierarchical Grid?</a> and
                    <a href="#how_to_develop_custom_grid_panel_factory">How to develop a custom grid panel factory?</a> for details.
                </p>
            </answer>
        </faq>
        <faq id="can_hierarchical_grid_use_non_hierarchical_model">
            <question>Can the hierarchical grid use Editable (non-hierarchical) data models?</question>
            <answer>
                <p>
                    Yes. It supports all existent types of models.
                </p>
            </answer>
        </faq>
        <faq id="can_tree_grid_use_non_tree_model">
            <question>Can the tree grid use Editable (non-tree) data models?</question>
            <answer>
                <p>
                    No. The problem is in totally different mechanisms of initializtion and rendering.
                </p>
            </answer>
        </faq>
        <faq id="how_to_check_rendering">
            <question>How to check grid content rendering progress, for instance to display a progress bar?</question>
            <answer>
                <p>
                    Just use the <i>org.gwt.advanced.client.ui.GridRowDrawCallbackHandler</i> interface. Extensions of
                    this class can be passed to the grid and it will inform your handler about the progress.
                    Note that this feature may make rendering slower. Use it only if you have to render large data sets.
                    Consider the example below.
<pre style="padding: 4px; line-height: 110%; font-family: monospace; background-color: rgb(255, 255, 255);">
<span style="background-color: rgb(255, 255, 255);">ProgressBar bar =</span><span style="font-weight: bold; color: rgb(0, 0, 128); background-color: rgb(255, 255, 255);"> new</span><span style="background-color: rgb(255, 255, 255);"> ProgressBar(</span><span style="font-weight: bold; color: rgb(0, 128, 0); background-color: rgb(255, 255, 255);">"Please wait..."</span><span style="background-color: rgb(255, 255, 255);">);
<br/>grid.setRowDrawHandler(bar);
<br/>bar.show();
<br/>grid.display();</span></pre>
                </p>
                <p>
                    <i>ProgressBar</i> is a hypotetic progress bar widget that can be used in your application.
                    It's important to show it before you invoke the <i>display()</i> method. Otherwise control may ba
                    catched by the grid and the progreess bar won't have a chance to be shown before rendering finished.
                    The <i>ProgressBar</i> should implement the <i>GridRowDrawCallbackHandler</i> interface. This
                    particular decision is applicable for this sample but you can implement your own handler which will
                    change progress externally.
                </p>
            </answer>
        </faq>
        <faq id="are_grid_columns_resizable">
            <question>Are the grid columns resizable?</question>
            <answer>
                <p>
                    Yes. This feature is available by default. Just press left mouse button over the line between
                    headers and holding it down move the mouse right or left.
                    Note that to keep column resizability enabled you shouldn't specify grid and column sizes in
                    percents and don't use <i>setStyleName()</i> and <i>addStyleName()</i> methods because they
                    override any programmatic styles.
                </p>
            </answer>
        </faq>
        <faq id="do_grids_support_keyboard_events">
            <question>Do the grids support keyboard events?</question>
            <answer>
                <p>
                    Yes. The grids of this library are able to handle keyboard events via
                    <a href="#what_is_grid_event_manager">grid event managers</a>. By default the following list
                    of key codes is supported.
                </p>
                <table class="faqTable">
                  <thead>
                    <tr>
                      <th>Operation Description</th>
                      <th>Key Code</th>
                      <th>Modifiers</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr>
                      <td>Cell activation / deactivation (opening for edit / closing)</td>
                      <td>Enter</td>
                      <td>-</td>
                    </tr>
                    <tr>
                      <td>Move the cursor down</td>
                      <td>Key Down</td>
                      <td>Alt-Ctrl</td>
                    </tr>
                    <tr>
                      <td>Move the cursor right</td>
                      <td>Key Right</td>
                      <td>Alt-Ctrl</td>
                    </tr>
                    <tr>
                      <td>Move the cursor up</td>
                      <td>Key Up</td>
                      <td>Alt-Ctrl</td>
                    </tr>
                    <tr>
                      <td>Move the cursor left</td>
                      <td>Key Left</td>
                      <td>Alt-Ctrl</td>
                    </tr>
                    <tr>
                      <td>Move the cursor to the first cell of the page</td>
                      <td>Home</td>
                      <td>Shift</td>
                    </tr>
                    <tr>
                      <td>Move the cursor to the last cell of the page</td>
                      <td>End</td>
                      <td>Shift</td>
                    </tr>
                    <tr>
                      <td>Move the cursor to the first page</td>
                      <td>Home</td>
                      <td>Alt-Ctrl</td>
                    </tr>
                    <tr>
                      <td>Move the cursor to the last page</td>
                      <td>End</td>
                      <td>Alt-Ctrl</td>
                    </tr>
                    <tr>
                      <td>Open the next page</td>
                      <td>PgDn</td>
                      <td>Alt-Ctrl</td>
                    </tr>
                    <tr>
                      <td>Open the previous page</td>
                      <td>PgUp</td>
                      <td>Alt-Ctrl</td>
                    </tr>
                    <tr>
                      <td>Move the cursor to the next cell (tabbing like in Excel)</td>
                      <td>Space</td>
                      <td>Alt-Ctrl</td>
                    </tr>
                    <tr>
                      <td>Move the cursor to the previous cell (backward tabbing like in Excel)</td>
                      <td>Space</td>
                      <td>Shift-Alt-Ctrl</td>
                    </tr>
                  </tbody>
                </table>
                <p>
                    You can also specify your own key combinations but note that some browsers may use the same keys
                    for other purposes. In this case you will have to disable this unexpected functionality
                    programmatically.
                </p>
            </answer>
        </faq>
        <faq id="what_is_grid_event_manager">
            <question>What is a grid event manager? How to customize it?</question>
            <answer>
                <p>
                    Grid event manager is a program unit that handles all keyboard and mouse events of the grid.
                    Each kind of grids has its own grid event manager implementation. So if the
                    <a href="../editable-grid.html">Editable Grid</a> uses
                    the <i>DefaultGridEventManager</i> the
                    <a href="../hierarchical-grid.html">Hierarchical Grid</a> handles events via the
                    <i>HierarchicalGridEventManager</i>. Both implementations have one super interface:
                    <i>org.gwt.advanced.client.ui.GridEventManager</i>
                    You can supply your own manager implementing this interface. Conside the sample below:
<pre style="line-height: 100%;font-family:monospace;background-color:#ffffff"><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> class</span><span style="background-color:#ffffff;"> MyGridEventManager</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> extends</span><span style="background-color:#ffffff;"> DefaultGridEventManager {
    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="background-color:#ffffff;"> MyGridEventManager(GridPanel panel) {
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">super</span><span style="background-color:#ffffff;">(panel);
   }

    </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">public</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;"> void</span><span style="background-color:#ffffff;"> dispatch(GridPanel panel, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">char</span><span style="background-color:#ffffff;"> keyCode, </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">int</span><span style="background-color:#ffffff;"> modifiers) {
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">if</span><span style="background-color:#ffffff;"> (keyCode ==</span><span style="color:#660e7a;background-color:#ffffff;font-weight:bold;font-style:italic;"> KEY_TAB)</span><span style="background-color:#ffffff;"> </span><span style="color:#808080;background-color:#ffffff;font-style:italic;">//move the cursor to the next cell on TAB pressing
            </span><span style="background-color:#ffffff;">moveToNextCell();
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">else
            </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">super</span><span style="background-color:#ffffff;">.dispatch(panel, keyCode, modifiers);
   }
}</span></pre>
                </p>
                <p>
                    This listing illustrates how to implement moving the cursor to the next cell on TAB key pressing.
                    You can assign the manager to a grid using the <i>EditableGrid.setGridEventmanager()</i> method.
                    Note that some key and combinations of keys may be used by particular browsers for other purposes.
                    So you will have to disable browser specific functionality programmatically.
                </p>
            </answer>
        </faq>
        <faq id="how_to_enable_paging_feature_for_subtrees">
            <question>How to enable the paging feature for subtrees in the TreeGrid?</question>
            <answer>
                <p>
                    Use the <i>TreeGridRow.setPagingEnabled()</i> method.
                </p>
            </answer>
        </faq>
        <faq id="how_grids_update_view">
            <question>How the grids update view on data change?</question>
            <answer>
                <p>
                    Every time you programmatically change data in the data model the <i>EventMediator</i> receives
                    the <i>EditableGridModelEvent</i>. This event contains all required information regarding what
                    was changed and how. According to these values the mediator invokes an appropriate protected
                    methods of the grid.
                </p>
                <div class="googleAds"><google-ads-horizontal-banner/></div>
            </answer>
        </faq>
    </part>
</faqs>