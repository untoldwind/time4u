<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <title>Editable (updatable) Grid</title>
    </properties>
    <body>
        <section name="Description">
            <div class="imageLeft">
              <p>
                  <img src="images/editable-grid-edit.gif" border="0" alt="Editable Grid supports different types of updatale cells"/>
              </p>
              <p>
                  <i>Editable Grid supports different types of updatale cells</i>
              </p>
            </div>
            <div class="textRight">
                <p>
                    Editable Grid is a most important widget of the library. It extends <a href="simple-grid.html">Simple Grid</a> and provides a wide range
                    of abilities. Being designed in best MVP traditions this component will be simple for undestanding if
                    you have expirience in Java Swing programming. As well as the Swing table component it's described by
                    data model that usally contains custom data and grid display settings like number of page to be
                    displayed, sorting column and order, total row number, etc.

                    There are two kinds of grid data models:
                </p>
                <p>
                    <ul>
                        <li>client model (this model allows client side sorting and paging)</li>
                        <li>lazy model (this model assumes that you synchronize data using remote services and / or something like this)</li>
                    </ul>
                </p>
                <p>
                    The grid is able to view both models.

                    It also supports editable (updatable) cells. Any grid cell is a widget that can handle browser events
                    and include complex content. The library provides numerous cell types for different purposes. However
                    if you need your own non-standard cell you can develop a custom implementation and plug it in the grid.

                    Starting from 1.3.0 version grid rendering has been optimized and currently draws textual reprsentation
                    of the cells instead of widgets insertion. This approach allows saving time and improves rendering
                    perfomance.

                    Note that this kind of rendering is backward compatible and every time a user clicks a cell
                    the grid changes textual representation to a widget automacally. So advanced features of the grid weren't
                    lost.

                    You can also use server side rendering. Sometimes it works much faster. Even in this case cells editing
                    features will be available.

                    Sample of the source code that demonstrates how to create a new grid can be found in the
                    <a href="quickstart.html">Quick Start</a>.
                </p>
            </div>
        </section>
        <br/>
        <div class="googleAds"><google-ads-horizontal-banner/></div>
        <section name="Features List">
            <div class="imageRight">
                <p>
                    <img src="images/editable-grid-control.gif" border="0" alt="Paging, sorting and rows management abilities are the key features of the grid"/>
                </p>
                <p>
                    <i>Paging, sorting and rows management capabilities are the key features of the grid</i>
                </p>
            </div>
            <div class="textleft">
                <p>
                  Main features of the widget are:

                  <ul>
                      <li>client server data paging</li>
                      <li>client and server data sorting</li>
                      <li>lazy loading of data</li>
                      <li>customizable keyboard events management</li>
                      <li>customizable content drawing, including server side rendering</li>
                      <li>updatable cells</li>
                      <li>multiple and sigle row selection modes</li>
                      <li>ability to add and remove rows as well as grid cleaning</li>
                      <li>ability to validate entering cell values</li>
                      <li>ability to synchronize whole data model and particular cells with any source of data</li>
                      <li>custom cells and custom data models support</li>
                      <li>resizable columns</li>
                      <li>scrollable body</li>
                      <li>themes support</li>
                  </ul>
                </p>
            </div>
        </section>
        <div class="googleAds"><google-ads-horizontal-banner/></div>
        <section name="Sample">
            <p>
                The next sample demonstrates how to create a new Editable Grid and a <a href="grid-panel.html">Grid Panel</a> and
                put them into a root panel.

                Note that the last step is important otherwise you won't see anything since the <i>GridPanel.display()</i> method
                prepares widgets for displaying but doesn't diplay them in fact.
            </p>
<source>
<pre style="line-height: 110%;font-family:monospace;background-color:#ffffff"><span style="background-color:#ffffff;">Editable model = </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> EditableGridDataModel(</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">null</span><span style="background-color:#ffffff;">);

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// create a new grid panel
</span><span style="background-color:#ffffff;">GridPanel panel = </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> GridPanel();

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// create a new editable grid and put it into the panel
</span><span style="background-color:#ffffff;">EditableGrid grid = panel.createEditableGrid (
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> String[]{</span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"First Name"</span><span style="background-color:#ffffff;">, </span><span style="color:#008000;background-color:#ffffff;font-weight:bold;">"Surname"</span><span style="background-color:#ffffff;">},
        </span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">new</span><span style="background-color:#ffffff;"> Class[]{LabelCell.</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">class</span><span style="background-color:#ffffff;">, LabelCell.</span><span style="color:#000080;background-color:#ffffff;font-weight:bold;">class</span><span style="background-color:#ffffff;">},
        model
);

</span><span style="color:#808080;background-color:#ffffff;font-style:italic;">// display all
</span><span style="background-color:#ffffff;">panel.display();

RootPanel.</span><span style="background-color:#ffffff;font-style:italic;">get(</span><span style="background-color:#ffffff;">).add(panel);
</span></pre>
</source>
        </section>
        <div class="googleAds"><google-ads-horizontal-banner/></div>
    </body>
</document>