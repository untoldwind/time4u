<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <title>Tutorial - Using Widgets</title>
    </properties>
    <body>
        <div class="navigator"><a href="core-modeling-data.html">Previous</a> | <a href="index.html">Table of contents</a> | <a href="core-events-handling.html">Next</a></div>
        <section name="Using Widgets">
            <p>
                All the library components extend one class - Widget. This class is a standard basic parent for all
                GWT widgets, not only for classes of this library. Some widgets may override basic methods containing
                in this class. Advanced GWT Components is not an exception. For internal purposes it offten provides
                renamed methods that perform original logic. You can use them in cases when you have to do something
                that is not overriden by a library class.
            </p>
            <p>
                Note that you can extend wny widget in the library and override any method since there are no private
                and final class members excepting internal fields. But it's not recommended because of possible
                incompatibility troubles that may occur in future versions of the library. 
            </p>
            <p>
                In fact Advanced GWT Components API ensures backward compatibility only for classes, public methods
                and constants. Even if it is planned to replace a class member with a new solution, old API will be
                kept "as is" and supported with limitations explained above.
            </p>
            <p>
                The next sample illustrates how you can invoke one of renamed orginal methods using custom extension
                of the widget:
            </p>
            <source>
new EditableGrid() {
    public Widget getOriginalWidget(int row, int column) {
        return super.getOriginalWidget(row, column);
    }
}.getOriginalWidget(0, 0);
            </source>
            <p>
                This simple sample gives three ideas:

                <ul>
                  <li>the idea on how to use overriden method</li>
                  <li>the idea on how to make it public</li>
                  <li>the idea on how to invoke it</li>
                </ul>
            </p>
            <p>
                It doesn't mean that you always need to write code like shown above, but probably helps to understand
                how the library works.  
            </p>
            <p>
                Another one question that is reasonable to talk about in this topic is the basic inteface
                <i>org.gwt.advanced.client.ui.AdvancedWidget</i>. It contains only one method <i>display()</i> and was
                added to the library because of perfomance improvements.
            </p>
            <p>
                It's not a secret that GWT renders content dynamically using JavaScript. And actually this solution
                makes GWT application be slower than alternative server side solutions. Taking into account this fact
                imagine what could happen if the widgets redrew their content on each widget property change!
            </p>
<div class="googleAds"><google-ads-horizontal-banner/></div>
            <p>
                To avoid this problem all the widgets implement this interface and redraw their content only if the
                <i>display()</i> method is invoked. Look at the next sample to understand how it works:
            </p>
            <source>
GridPanel panel = new GridPanel()
panel.set... //set something here...
panel.set... //...and here
panel.display();
            </source>
            <p>
                The lines 2 and 3 set panel properties but NOT make it be displayed or redrawn. If you're familiar with
                Swing you can note that it is similar to <i>JFrame.pack()</i> method.
            </p>
            <p>
                There are some exceptions from this rule. For instance grid columns resizing works without this method
                invocation because in fact this opertation changes column styles and doesn't renew content inside cells. 
            </p>
            <p>
                Note that to make your application work faster follow the next simple restrictions:

                <ul>
                    <li>Avoid invoking the <i>display()</i> method more times than it's required, for example, in loops</li>
                    <li>Do NOT call the method after each property setting</li>
                    <li>Do NOT invoke it manually if you have a deal with lazily loadable data models, use locking instead (see below)</li>
                </ul>
            </p>
            <p>
                <i>Locking</i> is another build-in feature of the library that solves the problem of asynchronous requests.
                GWT doesn't allow using synchronous RPC calls, this feature is not supported by default API. But in most
                cases synchronous invocations of remove services is much preferable than asynchronous ones.
            </p>
            <p>
                Widgets that require synchronous requests (actually any widget that support lazily loadable models)
                provide methods <i>lock()</i> and <i>unlock()</i>. The idea of these methods is simple. The first one
                creates an invisible popup panel that prevents all mouse and kayboard events on the page where it's
                displayed. As soon as a callback response was received the second method must be invoked to hide the
                panel and unlock all page controls.
            </p>
            <p>
                You can also find a good sample of locking in the
                <a href="../faq/data-model-faq.html#what_is_locking">FAQ</a> section. 
            </p>
            <p>
                Additionally to invisible panel displying the <i>unlock()</i> method redraws widget content or parts
                of content (it depends on what was changed in the data model during request).
            </p>
            <p>
                It's strongly recommended to use lock / unlock methods instead of direct <i>display()</i> call because
                the team of the Advanced GWT Components all the time works on rendering perfomance inmrovents and tries
                to do it in most optimal way. 
            </p>
            <p>
                Modern browsers like FireFox 3.x significantly improved JavaScript machine perfomance but there are
                cases when even all the solutions described above and super modern browsers don't provide expected
                speed of rendering.
                Advanced GWT Components offers mechanism alternative to GWT standard approch - the server side rendering.
                It means that you can build widget content on server side and it will be displayed allegedly it was
                dynamically rendered on client side.
            </p>
<div class="googleAds"><google-ads-horizontal-banner/></div>
            <p>
                Look at the sample that shows how it could be made for grids:
            </p>
            <source>
editableGrid.setGridRenderer() {
    new DefaultGridRenderer() {
        public void drawContent(GridDataModel model) {
            myService.getContent(
                new AsyncCallback() {
                    public void onSuccess(Object content) {
                       //put content into the grid cells here using FlexTable.setText() method
              
                       ((Editable)model).update((Object[][])content); //synchronize data model
                    }
                    public void onFailure(Throwable error) {
                       Window.alert("Unexpected error: " + error.getMessage());
                    }
                }
            )
        }
    }
}

editableGrid.display();
            </source>
            <p>
                This sample invokes the myService remotely and draws grid content on success. Sometimes it allows to
                achive very good results.
            </p>
            <p>
                Note that it doesn't matter how you render widgets. All advanced features like cells editing and
                validation are supported for both approcahes. Everything you should always keep in mind is that the data
                model MUST be synchronized with the view. In case of client rendering it happens automatically. In
                other cases you should do it manually as shown in the sample.
            </p>
            <p>
                There is one important exception to the thoughts explaned in this topic. It's the <i>SimpleGrid</i> widget.
                Being developed in 1.4.5 it was designed especially for those individuals who don't need advanced features
                and preferes standard GWT approaches.
            </p>
            <p>
                <i>SimpleGrid</i> is a basic class for all the grids of the library and doesn't provide features like:

                <ul>
                    <li>data models</li>
                    <li>editable (updatable) cells</li>
                    <li>rows selection</li>
                    <li>perfomance improvements (server side rendering, lazy loading, display(), etc)</li>
                </ul>
            </p>
            <p>
                On the other hand the <i>SimpleGrid</i> supports &lt;thead&gt; element, columns resizing and
                body scrolling. This widget replaces the <i>AdvancedFlexTable</i> and overrides some methods to fix
                some look &amp; feel issues that occur in the parent class.
                The grid displays content as soon as it's created and data added into the cells.
            </p>
            <p>
                If you are a supporter of classic approach you can you this widget to achive greater flexibility and
                implement necessary operations manually as you want.
            </p>
        </section>
<div class="googleAds"><google-ads-horizontal-banner/></div>
        <div class="navigator"><a href="core-modeling-data.html">Previous</a> | <a href="index.html">Table of contents</a> | <a href="core-events-handling.html">Next</a></div>
    </body>
</document>