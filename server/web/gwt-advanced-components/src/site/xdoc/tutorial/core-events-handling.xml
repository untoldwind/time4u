<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <title>Tutorial - Events Handling</title>
    </properties>
    <body>
        <div class="navigator"><a href="core-using-widgets.html">Previous</a> | <a href="index.html">Table of contents</a> | <a href="core-usign-themes.html">Next</a></div>
        <section name="Events Handling">
            <p>
                GWT provides an advanced tools for browser events handling. As usual widgets have accessor methods
                to add and remove listeners and Advanced GWT Components is not an exception.
            </p>
            <p>
                In most cases it uses standard interface to give an ability to handle mouse and keyboard events, but
                there are some specific events to be discussed here. The list of library listener interfaces is shown
                below.
            </p>
            <table>
                <thead>
                    <tr>
                        <th>Interface</th>
                        <th>Description</th>
                        <th>Used in Widgets</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><i>EditCellListener</i></td>
                        <td>
                            This lister is invoked on start and end edit cell events. Use it to validate entered values.
                            If the entered value is invalid, it won't be placed in the data model, the old value will be
                            restored instead.
                        </td>
                        <td>
                            <a href="../editable-grid.html">EditableGrid</a>,
                            <a href="../hierarchical-grid.html">HierarchicalGrid</a>,
                            <a href="../tree-grid.html">TreeGrid</a>
                        </td>
                    </tr>
                    <tr>
                        <td><i>ExpandableCellListener</i></td>
                        <td>
                            This listener handles mouse clicks on the expand cell image (usually the gray cross).
                            It is invoked after the cell is expanded or collapsed.
                        </td>
                        <td>
                            <a href="../hierarchical-grid.html">HierarchicalGrid</a>,
                            <a href="../tree-grid.html">TreeGrid</a>
                        </td>
                    </tr>
                    <tr>
                        <td><i>GridListener</i></td>
                        <td>
                            This listener handles data model and grid view synchronization. For instance
                            it is invoked on sort, clean or on save events. You can attach your own listener via
                            the <i>EventMediator</i>.
                        </td>
                        <td>
                            <a href="../grid-panel.html">GridPanel</a>,
                            <a href="../editable-grid.html">EditableGrid</a>,
                            <a href="../hierarchical-grid.html">HierarchicalGrid</a>,
                            <a href="../tree-grid.html">TreeGrid</a>
                        </td>
                    </tr>
                    <tr>
                        <td><i>GridToolbarListener</i></td>
                        <td>
                            This listener is invoked on grid toolbar button clicks. Each method of the listener is
                            related to one particular button. There is really hard to imagine a situation when you
                            have to provide your own implementation but if it's so you can attach it via the
                            <i>EventMediator</i>.  
                        </td>
                        <td>
                            <a href="../grid-panel.html">GridPanel</a>,
                            <a href="../grid-panel.html">GridToolbar</a>,
                            <a href="../editable-grid.html">EditableGrid</a>,
                            <a href="../hierarchical-grid.html">HierarchicalGrid</a>,
                            <a href="../tree-grid.html">TreeGrid</a>
                        </td>
                    </tr>
                    <tr>
                        <td><i>PagerListener</i></td>
                        <td>
                            This is a listener that is invoked on data page change. Using it you can detect what
                            is happening on the <i>Pager</i> widget. Attach your own implementation via the
                            <i>EventMediator</i>.
                        </td>
                        <td>
                            <a href="../grid-panel.html">GridPanel</a>,
                            <a href="../grid-panel.html">Pager</a>,
                            <a href="../editable-grid.html">EditableGrid</a>,
                            <a href="../hierarchical-grid.html">HierarchicalGrid</a>,
                            <a href="../tree-grid.html">TreeGrid</a>
                        </td>
                    </tr>
                    <tr>
                        <td><i>SelectRowListener</i></td>
                        <td>
                            This listener is invoked on grid row selection. It doesn't matter how the row has been
                            selected: by a user or by a widget. The listener handling method will be called anyway.
                        </td>
                        <td>
                            <a href="../editable-grid.html">EditableGrid</a>,
                            <a href="../hierarchical-grid.html">HierarchicalGrid</a>,
                            <a href="../tree-grid.html">TreeGrid</a>
                        </td>
                    </tr>
                    <tr>
                        <td><i>CalendarListener</i></td>
                        <td>
                            This listener is invoked on date change or cancelling.
                        </td>
                        <td>
                            <a href="../text-and-button.html">DatePicker</a>
                        </td>
                    </tr>
                    <tr>
                        <td><i>SuggestionBoxListener</i></td>
                        <td>
                            This listener is invoked when a user changes a value in the <i>SuggestionBox</i>.
                        </td>
                        <td>
                            <a href="../text-and-button.html">SuggestionBox</a>
                        </td>
                    </tr>
                    <tr>
                        <td><i>GridRowDrawCallbackHandler</i></td>
                        <td>
                            This is not a listener interface because it doesn't handles any input event. Use it cases
                            when you need to display a progress of grid content rendereng, for example, in a progress
                            bar.
                        </td>
                        <td>
                            <a href="../editable-grid.html">EditableGrid</a>,
                            <a href="../hierarchical-grid.html">HierarchicalGrid</a>,
                            <a href="../tree-grid.html">TreeGrid</a>
                        </td>
                    </tr>
                </tbody>
            </table>
<div class="googleAds"><google-ads-horizontal-banner/></div>
            <p>
                As you must be noticed some listeners may be attached only via <i>EventMediator</i>. This is an internal
                class which performs events firing in cases when you use the <i>GridPanel</i>. It's strongly recommended
                to use this panel even if you are not going to diplay toolbars and pagers. This widget simplifies
                UI maintenance and dispatches events via the <i>EventMediator</i>.
            </p>
            <p>
                Another key entity related to events handling is the <i>GridEventManager</i> interface. Its
                implementations are able to handle mouse, keyboard and focus events occuring in the grids. If need
                centralized input controls management simply make your own implementation and inject it into a grid
                using the <i>GridPanel.setGridEventManager()</i> method.
            </p>
            <p>
                By default all the grids already have managers assigned to them. And you can extend them instead of
                using interface implementation. Here is the sample illustrating how you can do it:
            </p>
            <source>
GridPanel panel = new GridPanel();
...
panel.setGridEventManager(new DefaultGridEventManager() {
    public void dispatch(GridPanel panel, char keyCode, int modifiers) {
        if (KeyboardListener.KEY_ENTER == keyCode) {
            Window.alert("Enter key pressed!");
        }
        super.dispatch(panel, keyCode, modifiers);
    }
})
            </source>
            <p>
                This listing creates a new <i>GridPanel</i> and sets a new <i>GridEventManager</i> that displays the
                alert window when the Enter button is pressed. 
            </p>
        </section>
<div class="googleAds"><google-ads-horizontal-banner/></div>
        <div class="navigator"><a href="core-using-widgets.html">Previous</a> | <a href="index.html">Table of contents</a> | <a href="core-usign-themes.html">Next</a></div>
    </body>
</document>