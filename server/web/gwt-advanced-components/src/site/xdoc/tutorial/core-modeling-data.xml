<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <title>Tutorial - Modeling Data</title>
    </properties>
    <body>
        <div class="navigator"><a href="core.html">Previous</a> | <a href="index.html">Table of contents</a> | <a href="core-using-widgets.html">Next</a></div>
        <section name="Modeling Data">
            <p>
                If you have already had a deal with Java/Swing programming you must know that any visual component
                of the toolkit has a <i>data model</i>. Usually developers use data models to store data whereas
                components display this data in specific way.
            </p>
            <p>
                The main conceptual difference between GWT and Swing is that GWT widgets don't use models at all.
                Authors of GWT tried to simplify the framework as much as possible and merged data and its
                representation in one entity - a <i>widget</i>. Note that GWT generally copies features of JavaScript
                and allows wrapping typical JavaScript functions in Java code. So, this decision might be justified.
            </p>
            <p>
                Anyway this idea makes GWT simpler. However it has several disadvantages:

                <ul>
                    <li>Sometimes it's rather hard to extract pure data from a widget</li>
                    <li>Having one widget it's impossible to reuse the same data in another one without complicated convertion</li>
                    <li>Changes in data don't affect current view and you have to worry about representation and change the view manually every time when you need it</li>
                    <li>It's impossible to transfer widgets to the server side and back because widgets are not serializable</li>
                    <li>etc</li>
                </ul>
            </p>
            <p>
                To cover all the lacks in standard approach Advanced GWT Components offer easy and reliable solution -
                <i>data models</i>.
                Most of library widgets have a least one model and can display the data stored in the model.
                Current there are several basic interfaces for diffrent kinds of widgets. All the models have the
                same package <i>org.gwt.advanced.client.datamodel.*</i>.
            </p>
<div class="googleAds"><google-ads-horizontal-banner/></div>
            <table>
                <thead>
                    <tr>
                        <th>Interface</th>
                        <th>Description</th>
                        <th>Used in Widgets</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><i>GridDataModel</i></td>
                        <td>
                            This is a data model for all library tables and grids. It has many extending
                            interfaces and implementations. Learn API documentation of a particular grid to choose
                            a correct data model for it.
                        </td>
                        <td>
                            <a href="../editable-grid.html">EditableGrid</a>,
                            <a href="../hierarchical-grid.html">HierarchicalGrid</a>,
                            <a href="../tree-grid.html">TreeGrid</a>
                        </td>
                    </tr>
                    <tr>
                        <td><i>Editable</i></td>
                        <td>
                            This is a data model for all editable (updatable) grids. If the <i>GridDataModel</i>
                            doesn't allow changing data dynamically (immutable model), this extension does. Note
                            that this interface extends the previous one.
                        </td>
                        <td>
                            <a href="../editable-grid.html">EditableGrid</a>,
                            <a href="../hierarchical-grid.html">HierarchicalGrid</a>,
                            <a href="../tree-grid.html">TreeGrid</a>
                        </td>
                    </tr>
                    <tr>
                        <td><i>Hierarchical</i></td>
                        <td>
                            This data model is usually used to store complex objects, i.e. objects of different
                            types and related to each other like a tree. Interface implementations provide several
                            additional methods to add and remove subobjects.
                        </td>
                        <td>
                            <a href="../hierarchical-grid.html">HierarchicalGrid</a>
                        </td>
                    </tr>
                    <tr>
                        <td><i>Composite</i></td>
                        <td>
                            This data model stores a hierarchy of the same type objects. In comparison with the
                            previos model it doesn't allow adding objects into subtrees if they have different
                            structure in comparison to the parent node.
                        </td>
                        <td>
                            <a href="../tree-grid.html">TreeGrid</a>
                        </td>
                    </tr>
                    <tr>
                        <td><i>LazyLoadable</i></td>
                        <td>
                            Data models implemnting this interface allow lazy data loading. It doesn't matter
                            where data is stored at the momen when a widget apply the model. Anyway it will be
                            loaded dynamically when it's requested. Each non-lazy model has a least one lazy
                            prototype. Widgets which can support the first type can also support its lazy
                            &quot;brother&quot;
                        </td>
                        <td>
                            <a href="../editable-grid.html">EditableGrid</a>,
                            <a href="../hierarchical-grid.html">HierarchicalGrid</a>,
                            <a href="../tree-grid.html">TreeGrid</a>
                        </td>
                    </tr>
                    <tr>
                        <td><i>Pageable</i></td>
                        <td>
                            Pageable data models often required if large volume of data must be splitted to
                            separate pages. <i>GridDataModel</i> extends this interface and therefore all library
                            grids support paging. Lazily loadable models use paging to load data on page-by-page
                            basis.
                        </td>
                        <td>
                            <a href="../editable-grid.html">EditableGrid</a>,
                            <a href="../hierarchical-grid.html">HierarchicalGrid</a>,
                            <a href="../tree-grid.html">TreeGrid</a>
                        </td>
                    </tr>
                    <tr>
                        <td><i>ListDataModel</i></td>
                        <td>
                            This is a set of pairs model. It consists of items and each of them is identified by
                            string ID (key) and contains payload (value). It's usually used for complex lists.
                        </td>
                        <td>
                            <a href="../text-and-button.html">ComboBox</a>,
                            <a href="../text-and-button.html">SuggestionBox</a>
                        </td>
                    </tr>
                </tbody>
            </table>
            <p>
                Note that there is one important exception: <i>SimpleGrid</i>. This widget is a grid but don't use
                data models at all. We made it for those developers who are happy with GWT common approch and wants
                to use advanced <i>view</i> functionality and believes they don't need modeling.
            </p>
            <p>
                Sometimes it may be reasonable but it's strongly recommended to use libary models and / or develop
                your own ones because of problems listed above.
            </p>
            <p>
                The next code listing shows how to create a model and use it:
            </p>
            <source>
Object[][] data = new Object[][] {
    "Text 1", new ListBox(), Boolean.TRUE
};

Editable model = new EditableGridDataModel(data);
model.addRow(1, new Object[]{"Text 2", new ListBox(), Boolean.FALSE});
model.addColumn(2, new Object[]{Integer.MAX_VALUE});
            </source>
<div class="googleAds"><google-ads-horizontal-banner/></div>
            <p>
                As a result the model will contain 2 rows and 4 columns. Note that adding column we put only one value
                in the array. The model detects that a new column array dimension is less than number of rows and
                puts null values automatically.
            </p>
            <p>
                Model flexibility might be restricted by a widget that displays the data. In the sample above you can
                notice that the model takes abstract array of objects, i.e. a matrix. But being used in the
                <i>EditableGrid</i> and it's extentions it must contain value of the same types in the same columns.
                Also this widget doesn't allow dynamic columns adding and therefore you may broke the view if add it
                after the grid was initialized.
            </p>
            <p>
                Interesting that the model may contain not only plain data but also GWT widgets. It was done to make it
                copatible with old GWT applications where you might integrate the library and where you probably use
                simple flex tables.
            </p>
            <p>
                Lazy data loading sample is shown below:
            </p>
            <source>
DataModelCallbackHandler handler = new DataModelCallbackHandler() {
    public void synchronize(GridDataModel model) {
        //fill the model with data here
    }
};

LazyLoadable model = new LazyGridDataModel(handler);
model.setTotalRowCount(1000); //set a total row count to make lazy paging
            </source>
            <p>
                The listing creates a new lazily loadable model and defines a callback handler that will be used to
                put data into this model dynamically. It also sets a total row count to cheat widgets that use this
                model. Widget renderers will "think" that the model contains more rows than it's really does.
            </p>
            <p>
                To load the next portion of data or simply refresh it you can use the statement:
                <i>model.getHandler().synchronize(model)</i>.
            </p>
            <p>
                The next sample illustrates how to create and use <i>ListDataModel</i>:
            </p>
            <source>
ListDataModel model = new ComboBoxdataModel();
model.add("Item 1", new IconItem("my-image1.jpg", "Image 1"));
model.add("Item 2", new IconItem("my-image2.jpg", "Image 2"));
model.add("Item 3", new IconItem("my-image3.jpg", "Image 3"));
            </source>
            <p>
                The sample creates a new model for the <i>ComboBox</i> and fills it with the keyed items. Each of
                the items is a labeled image. Note that it doesn't mean that it contains an image itself. It just points
                to an image URI.
            </p>
        </section>
<div class="googleAds"><google-ads-horizontal-banner/></div>
        <div class="navigator"><a href="core.html">Previous</a> | <a href="index.html">Table of contents</a> | <a href="core-using-widgets.html">Next</a></div>
    </body>
</document>